language: rust
---

name: implementsStruct
phrase: imp | implement
insertionScope: statement

$1.insertionFormatter: PUBLIC_CAMEL_CASE
-
impl $1 {
    $0
}
---

name: implementsGenericStruct
phrase: generic imp | generic implement | gen imp | gen implement
insertionScope: statement

$2.insertionFormatter: PUBLIC_CAMEL_CASE
-
impl<$1> $2<$3> {
    $0
}
---

name: enumTypeDeclaration
phrase: enum
$1.insertionFormatter: PUBLIC_CAMEL_CASE
-
enum $1 {
    $0
}
---

name: traitDeclaration
phrase: trait
$1.insertionFormatter: PUBLIC_CAMEL_CASE
-
trait $1 {
    $0
}
---

name: traitImplementation
phrase: implement trait | imp trait
$1.insertionFormatter: PUBLIC_CAMEL_CASE
-
impl $1 for $2 {
    $0
}
---

name: ifLetStatement
phrase: if let
insertionScope: statement
-
if let $1 = $2 {
    $0
}
---

name: letElseStatement
phrase: let else
insertionScope: statement
-
let $1 = $2 else {
    return $0;
};
---

name: unsafeBlock
phrase: unsafe
-
unsafe {
    $0
}
---

name: attributeStatement
phrase: attribute | attr
$0.insertionFormatter: SNAKE_CASE
-
#[$0]
---

name: moduleDeclaration
phrase: mod | module
$1.insertionFormatter: SNAKE_CASE
-
mod $1 {
    $0
}
---

name: testModuleDeclaration
phrase: test mod | test module
-
#[cfg(test)]
mod tests {
    use super::*;

    $0
}
---
